// initialization
ila $3, 0 // A base addr
ila $4, 64 // B base addr
ila $5, 128 // C base addr
il $6, 0 // counter k
il $8, 0 // accumulator
LOOP:
mpyi $10, $6, 16 // $10 = k * 16 byte offset
a $11, $3, $10 // $11 = addr of A[0][k]
lqd $12, 0($11) // $12 = A[0][k]
a $13, $4, $10 // $13 = addr of B[k][0]
lqd $14, 0($13) // $14 = B[k][0]
fma $8, $12, $14, $8 // $8 = A[0][k] * B[k][0] + $8
ai $6, $6, 1
ceqi $15, $6, 4 // if $6 = 4 then $15 = 1
brz $15, LOOP  // if $15 != 0 branch taken
stqd $8, 0($5)
stop

